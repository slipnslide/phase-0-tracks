sqlite> SELECT * FROM rbg_info
   ...> ;
1|Slipnslide|1|1
2|Scott|1|4
3|Blake|1|5
4|Rachy|4|5
5|Gengar|2|1
6|Jani|3|6
7|Pluto|2|6

sqlite> UPDATE RBG_Info SET team_id=1, class_id=5 WHERE player_name="Blake";
3|Blake|1|5

sqlite> Select * from rbg_info, teams WHERE team_id = teams.id;
1|Slipnslide|1|1|1|ABN
2|Scott|1|4|1|ABN
3|Blake|1|5|1|ABN
4|Rachy|4|5|4|Dodgers
5|Gengar|2|1|2|DON
6|Jani|3|6|3|Jani
7|Pluto|2|6|2|DON



sqlite> SELECT RBG_info.name, teams.name, classes.name FROM RBG_info JOIN teams, classes
ON player_name.team_id = teams.id, player_name.class_id = classes.id;


sqlite> SELECT rbg_info.player_name, teams.name, classes.name
   ...> FROM rbg_info
   ...> JOIN teams, classes
   ...>  ON rbg_info.team_id = teams.id and rbg_info.class_id = classes.id;
Slipnslide|ABN|Warlock
Scott|ABN|DH
Blake|ABN|Priest
Rachy|Dodgers|Priest
Gengar|DON|Warlock
Jani|Jani|Druid
Pluto|DON|Druid
sqlite>

sqlite> DELETE FROM rbg_info
   ...> WHERE player_name= "Pluto";
sqlite> select * from rbg_info
   ...> ;
1|Slipnslide|1|1
2|Scott|1|4
3|Blake|1|5
4|Rachy|4|5
5|Gengar|2|1
6|Jani|3|6

I attempted to use the joins below but couldn't figure out how to make it work using 3 tables.

The CROSS JOIN
A CROSS JOIN matches every row of the first table with every row of the second table.
 If the input tables have x and y columns, respectively, the resulting table will have x*y columns. 
Because CROSS JOINs have the potential to generate extremely large tables, care must be taken to only use them when appropriate.

The INNER JOIN
A INNER JOIN creates a new result table by combining column values of two tables (table1 and table2) based upon the join-predicate. 
The query compares each row of table1 with each row of table2 to find all pairs of rows which satisfy the join-predicate. 
When the join-predicate is satisfied, column values for each matched pair of rows of A and B are combined into a result row.

An INNER JOIN is the most common type of join and is the default type of join. You can use INNER keyword optionally.



The OUTER JOIN
The OUTER JOIN is an extension of the INNER JOIN. 
Though SQL standard defines three types of OUTER JOINs: LEFT, RIGHT, and FULL but SQLite only supports the LEFT OUTER JOIN.

The OUTER JOINs have a condition that is identical to INNER JOINs, expressed using an ON, USING, or NATURAL keyword. 
The initial results table is calculated the same way.
Once the primary JOIN is calculated, an OUTER join will take any unjoined rows from one or both tables,
pad them out with NULLs, and append them to the resulting table.